@if variable-exists(font-url--google){
	@import url($font-url--google);
}

@if variable-exists(typefaces) {
  @each $file, $option in $typefaces {
    @font-face {
      font-family: map-get(map-get($typefaces, $file), family);
      font-style: map-get(map-get($typefaces, $file), style);
      font-weight: map-get(map-get($typefaces, $file), weight);
      src: url('../fonts/#{$file}.ttf') format('truetype'),
           url('../fonts/#{$file}.woff') format('woff'),
           url('../fonts/#{$file}.woff2') format('woff2');
    }
  }
}

//Calculate em values
@function em($target, $context: $base__font-size){
	@return($target/$context) * 1em;
}

//Calculate rem values
@function rem($size){
  @return ($size/$base__font-size) * 1rem;
}

//Color Palette
@function palette($palette, $shade: base){
	@return map-get(map-get($palettes, $palette), $shade);
}

//Check Even
@function even($number){
	@if $number%2 == 0{
		@return 1;
	}
	@else{
		@return 0;
	}
}

//Mixins
@mixin bg-colors($map){
	@each $theme, $color in $map{
		&--#{$theme}{
			background: $color;
		}
	}
} 

//BEM(Block Element Modifier) Naming Convention
//For Element
@mixin e($element){
	&__#{$element}{
		@content;
	}
}
//For Modifiers
@mixin m($modifier){
	&--#{$modifier}{
		@content;
	}
}

//Hover Mixin
@mixin hover {
  &:hover,
  &:active,
  &:focus { @content; }
}

//Turn px in rem with px fallback
@mixin rem($size) {
  font-size: $size; //Fallback in px
  font-size: calculateRem($size);
}

//Pseudo-elements
@mixin psuedo-el($el, $el-width: null, $el-height: null){
	@if $el == ':before' or $el == 'after'{
		&:#{$el}{
			@extend %pseudos;
			width: $el-width;
			height: $el-height;
			@content;
		}
	}
	@else{
		@warn "#{$el} is not a valid pseudo-element";
	}
}

//Set Background
@mixin bg($img, $repeat: no-repeat, $position: 0 0,  $size: cover){
	background-image: url('#{$path--rel}/#{$img}');
	background-repeat: $repeat;
	background-position: $position;
	background-size: $size;
}